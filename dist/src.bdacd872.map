{"version":3,"sources":["src\\index.js"],"names":["IMAGES","loadImage","src","img","Image","result","Promise","resolve","reject","onload","onerror","Error","loadImages","srcs","all","map","createCanvas","width","height","canvas","document","createElement","getImageData","bufferCanvas","bufferCanvasContext","getContext","drawImage","getAntialiasedData","sourceData","ofsX","ofsY","tpo","range","count","sum","x","y","targetPix","targetPos","init","querySelector","ctx","then","console","log","images","setTimeout","mapData","outputData","createImageData","dy","dx","pix","arrayPos","depth","data","ofs_x","Math","round","ofs_y","putImageData","window","load"],"mappings":"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","file":"src.bdacd872.map","sourcesContent":["const IMAGES = [\r\n\t'cio3.jpg',\r\n\t'ripple.png',\r\n]\r\n\r\nconst loadImage = (src) => {\r\n\tconst img = new Image();\r\n\t\r\n\tconst result = new Promise((resolve, reject) => {\r\n\t\timg.onload = resolve(img);\r\n\t\timg.onerror = reject(new Error(`Could not load ${src}`));\r\n\t});\r\n\t\r\n\timg.src = `/images/${src}`;\r\n\t\r\n\treturn result ;\r\n}\r\n\r\nconst loadImages = (srcs) => {\r\n\treturn Promise.all(srcs.map(src => loadImage(src)));\r\n}\r\n\r\nconst createCanvas = (width, height) => {\r\n\tconst canvas = document.createElement('canvas');\r\n\tcanvas.width = width;\r\n\tcanvas.height = height;\r\n\treturn canvas;\r\n}\r\n\r\nconst getImageData = (width, height, img) => {\t\r\n\tconst bufferCanvas = createCanvas(width, height);\r\n\tconst bufferCanvasContext = bufferCanvas.getContext('2d');\r\n\t\r\n\tbufferCanvasContext.drawImage(img, 0, 0);\r\n\treturn bufferCanvasContext.getImageData(0, 0, width, height);\r\n}\r\n\r\nconst getAntialiasedData = (sourceData, ofsX, ofsY, tpo) => {\r\n\tvar range = 15;\r\n\tvar count = 0, sum = 0;\r\n\tfor (let x = ofsX - range; x < ofsX + range; x++) {\r\n\t\tfor (let y = ofsY - range; y < ofsY + range; y++) {\r\n\t\t\tvar targetPix = y * 512 + x, targetPos = targetPix * 4;\r\n\t\t\tif(sourceData[targetPos + tpo]) {\r\n\t\t\t\tsum += sourceData[targetPos + tpo];\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn sum / count;\r\n}\r\n\r\nconst init = () => {\r\n\tconst canvas = document.querySelector('canvas');\r\n\tcanvas.width = 512;\r\n\tcanvas.height = 512;\r\n\tconst ctx = canvas.getContext('2d');\r\n\t\r\n\tloadImages(IMAGES).then(images => {\r\n\t\tconsole.log(images);\r\n\t\tsetTimeout(() => {\r\n\t\t\tconst mapData = getImageData(512, 512, images[0]);\r\n\t\t\tconst sourceData = getImageData(512, 512, images[1]);\r\n\t\t\tconst outputData = ctx.createImageData(512, 512);\r\n\t\t\tconsole.log(mapData, sourceData);\r\n\t\t\tconst dy = -128, dx = -128;\r\n\t\t\t\r\n\t\t\tfor (var y = 0; y < 512; y++) {\r\n\t\t\t\tfor (var x = 0; x < 512; x++) {\r\n\r\n\t\t\t\t\t// Get the greyscale value from the displacement map as a value between 0 and 1\r\n\t\t\t\t\t// 0 = black (farthest), 1 = white (nearest)\r\n\t\t\t\t\t// Higher values will be more displaced\r\n\t\t\t\t\tvar pix = y * 512 + x,\r\n\t\t\t\t\t\tarrayPos = pix * 4,\r\n\t\t\t\t\t\tdepth = mapData.data[arrayPos] / 255;\r\n\r\n\t\t\t\t\t// Use the greyscale value as a percentage of our current drift,\r\n\t\t\t\t\t// and calculate an xy pixel offset based on that\r\n\t\t\t\t\tvar ofs_x = Math.round(x + (dx * depth)),\r\n\t\t\t\t\t\tofs_y = Math.round(y + (dy * depth));\r\n\r\n\t\t\t\t\t// Clamp the offset to the canvas dimensions\r\n\t\t\t\t\tif (ofs_x < 0) ofs_x = 0;\r\n\t\t\t\t\tif (ofs_x > 512 - 1) ofs_x = 512 - 1;\r\n\t\t\t\t\tif (ofs_y < 0) ofs_y = 0;\r\n\t\t\t\t\tif (ofs_y > 512 - 1) ofs_y = 512 - 1;\r\n\r\n\t\t\t\t\toutputData.data[arrayPos] = getAntialiasedData(sourceData.data, ofs_x, ofs_y, 0);\r\n\t\t\t\t\toutputData.data[arrayPos + 1] = getAntialiasedData(sourceData.data, ofs_x, ofs_y, 1);\r\n\t\t\t\t\toutputData.data[arrayPos + 2] = getAntialiasedData(sourceData.data, ofs_x, ofs_y, 2);\r\n\t\t\t\t\toutputData.data[arrayPos + 3] = getAntialiasedData(sourceData.data, ofs_x, ofs_y, 3);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tctx.putImageData(outputData, 0, 0);\r\n\t\t\tconsole.log('DONE', outputData);\r\n\t\t}, 1000);\r\n\t});\r\n}\r\n\r\nwindow.load = init();"]}